import numpy as np
import sys

class CahnHilliardState():
    """
    Class for tracking the state of 1D Cahn Hilliard equations.

    **Inputs**

    ----------
    C0 : numpy float array
        Initial state.
    grid : numpy float array
        Computational grid.
    """
    
    def __init__(self,C0=[],grid=[]):
        if (grid != []):
            # Pad grid with ghost cells
            dx   = grid[1]-grid[0]
            grid = np.hstack([-dx, grid, grid[-1] + dx])
            C0   = np.hstack([0, C0.ravel(), 0]).reshape((1,-1))
        self.C    = C0    
        self.grid = grid

    def push_state_to_stack(self,Cnew):
        """
        Method to push new state to stack.
        """
        self.C      = np.vstack( [self.C, Cnew] )

    def write(self,outfile,tskip=1):
        C = self.C[::tskip , 1:-1] # tskip period sampling + cut out ghost cells
        np.savetxt(outfile,C)
